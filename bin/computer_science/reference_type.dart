class Person {
  String name;

  Person(this.name);
}

void main() {
  final p1 = Person("Bayram");
  final p2 = p1;

  p2.name = "Jeren";

  print(p1.name); // Output: Jeren
  print(p2.name); // Output: Jeren
}

// В Dart объекты являются ссылочными типами. Когда вы присваиваете один объект другому,
// обе переменные указывают на один и тот же объект в памяти. Поэтому изменения,
// внесённые через одну переменную, будут отражаться и в другой.
// Это отличается от типов значений, где каждая переменная имеет свою собственную копию данных.
// В этом примере и p1, и p2 ссылаются на один и тот же объект Person.
// Когда изменяется p2.name, это влияет на объект, на который ссылаются и p1, и p2.
// Поэтому оба оператора print выводят "Jeren".
// Такое поведение соответствует работе ссылочных типов в Dart.
// Если вы хотите создать копию объекта, необходимо реализовать метод копирования
// или использовать конструктор копирования. Вот пример, как:

class User {
  String name;

  User(this.name);

  User copyWith({String? name}) {
    return User(name ?? this.name);
  }
}

void mainAnother() {
  final user1 = User("Alice");
  final user2 = user1.copyWith(name: "Bob");

  print(user1.name); // Output: Alice
  print(user2.name); // Output: Bob
}

// В этом примере метод `copyWith` позволяет создать новый объект `User`
// с изменённым именем, не затрагивая оригинальный объект `user1`
// Таким образом, `user1` и `user2` теперь ссылаются на разные объекты,
// что позволяет избежать проблем с изменением данных через ссылки.
// Это демонстрирует, как можно работать с ссылочными типами в Dart,
// сохраняя при этом неизменность оригинальных объектов.
